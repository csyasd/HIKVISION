<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>S7 PLC 数据监控系统</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-connected {
            background-color: #28a745;
        }
        .status-disconnected {
            background-color: #dc3545;
        }
        .data-card {
            transition: transform 0.2s;
        }
        .data-card:hover {
            transform: translateY(-2px);
        }
        .refresh-btn {
            animation: spin 1s linear infinite;
        }
        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-microchip me-2"></i>
                S7 PLC 数据监控系统
            </a>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-satellite-dish me-2"></i>
                            PLC 连接状态
                        </h5>
                        <div>
                            <span id="connectionStatus" class="status-indicator status-disconnected"></span>
                            <span id="connectionText">未连接</span>
                            <button id="connectBtn" class="btn btn-success btn-sm ms-3">
                                <i class="fas fa-plug"></i> 连接
                            </button>
                            <button id="disconnectBtn" class="btn btn-danger btn-sm ms-2" disabled>
                                <i class="fas fa-unlink"></i> 断开
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="card data-card mb-4">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            GPS 经度
                        </h6>
                    </div>
                    <div class="card-body text-center">
                        <h3 id="longitude" class="text-info">--</h3>
                        <small class="text-muted">度</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card data-card mb-4">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            GPS 纬度
                        </h6>
                    </div>
                    <div class="card-body text-center">
                        <h3 id="latitude" class="text-success">--</h3>
                        <small class="text-muted">度</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card data-card mb-4">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="mb-0">
                            <i class="fas fa-id-card me-2"></i>
                            设备 ID
                        </h6>
                    </div>
                    <div class="card-body text-center">
                        <h3 id="deviceId" class="text-warning">--</h3>
                        <small class="text-muted">设备编号</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-clock me-2"></i>
                            数据更新时间
                        </h5>
                        <button id="refreshBtn" class="btn btn-primary btn-sm">
                            <i class="fas fa-sync-alt"></i> 刷新数据
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <strong>最后更新时间：</strong>
                                <span id="lastUpdateTime">--</span>
                            </div>
                            <div class="col-md-6">
                                <strong>数据状态：</strong>
                                <span id="dataStatus" class="badge bg-secondary">未知</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-cogs me-2"></i>
                            手动读取测试
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">读取Real值</label>
                                    <div class="input-group">
                                        <span class="input-group-text">DB</span>
                                        <input type="number" id="realDbNumber" class="form-control" value="1" placeholder="数据块编号">
                                        <span class="input-group-text">DBD</span>
                                        <input type="number" id="realStartByte" class="form-control" value="0" placeholder="起始字节">
                                        <button id="readRealBtn" class="btn btn-outline-primary">读取</button>
                                    </div>
                                    <div class="mt-2">
                                        <strong>结果：</strong>
                                        <span id="realResult" class="text-muted">--</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">读取Int值</label>
                                    <div class="input-group">
                                        <span class="input-group-text">DB</span>
                                        <input type="number" id="intDbNumber" class="form-control" value="1" placeholder="数据块编号">
                                        <span class="input-group-text">DBW</span>
                                        <input type="number" id="intStartByte" class="form-control" value="8" placeholder="起始字节">
                                        <button id="readIntBtn" class="btn btn-outline-primary">读取</button>
                                    </div>
                                    <div class="mt-2">
                                        <strong>结果：</strong>
                                        <span id="intResult" class="text-muted">--</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 全局变量
        let isConnected = false;
        let refreshInterval;

        // DOM元素
        const connectionStatus = document.getElementById('connectionStatus');
        const connectionText = document.getElementById('connectionText');
        const connectBtn = document.getElementById('connectBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');
        const refreshBtn = document.getElementById('refreshBtn');
        const longitude = document.getElementById('longitude');
        const latitude = document.getElementById('latitude');
        const deviceId = document.getElementById('deviceId');
        const lastUpdateTime = document.getElementById('lastUpdateTime');
        const dataStatus = document.getElementById('dataStatus');

        // 手动读取元素
        const readRealBtn = document.getElementById('readRealBtn');
        const readIntBtn = document.getElementById('readIntBtn');
        const realResult = document.getElementById('realResult');
        const intResult = document.getElementById('intResult');

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            checkConnectionStatus();
            setupEventListeners();
        });

        // 设置事件监听器
        function setupEventListeners() {
            connectBtn.addEventListener('click', connectToPlc);
            disconnectBtn.addEventListener('click', disconnectFromPlc);
            refreshBtn.addEventListener('click', refreshData);
            readRealBtn.addEventListener('click', readRealValue);
            readIntBtn.addEventListener('click', readIntValue);
        }

        // 检查连接状态
        async function checkConnectionStatus() {
            try {
                const response = await fetch('/api/plc/status');
                const result = await response.json();
                
                if (result.success) {
                    updateConnectionStatus(result.data);
                }
            } catch (error) {
                console.error('检查连接状态失败:', error);
                updateConnectionStatus(false);
            }
        }

        // 更新连接状态显示
        function updateConnectionStatus(connected) {
            isConnected = connected;
            
            if (connected) {
                connectionStatus.className = 'status-indicator status-connected';
                connectionText.textContent = '已连接';
                connectBtn.disabled = true;
                disconnectBtn.disabled = false;
            } else {
                connectionStatus.className = 'status-indicator status-disconnected';
                connectionText.textContent = '未连接';
                connectBtn.disabled = false;
                disconnectBtn.disabled = true;
            }
        }

        // 连接到PLC
        async function connectToPlc() {
            try {
                connectBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 连接中...';
                connectBtn.disabled = true;

                const response = await fetch('/api/plc/connect', {
                    method: 'POST'
                });
                const result = await response.json();

                if (result.success) {
                    updateConnectionStatus(true);
                    showAlert('连接成功！', 'success');
                    // 连接成功后自动刷新数据
                    refreshData();
                } else {
                    showAlert('连接失败：' + result.message, 'danger');
                }
            } catch (error) {
                console.error('连接失败:', error);
                showAlert('连接失败：' + error.message, 'danger');
            } finally {
                connectBtn.innerHTML = '<i class="fas fa-plug"></i> 连接';
                connectBtn.disabled = false;
            }
        }

        // 断开PLC连接
        async function disconnectFromPlc() {
            try {
                disconnectBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 断开中...';
                disconnectBtn.disabled = true;

                const response = await fetch('/api/plc/disconnect', {
                    method: 'POST'
                });
                const result = await response.json();

                if (result.success) {
                    updateConnectionStatus(false);
                    showAlert('已断开连接', 'info');
                    clearData();
                } else {
                    showAlert('断开失败：' + result.message, 'danger');
                }
            } catch (error) {
                console.error('断开失败:', error);
                showAlert('断开失败：' + error.message, 'danger');
            } finally {
                disconnectBtn.innerHTML = '<i class="fas fa-unlink"></i> 断开';
                disconnectBtn.disabled = false;
            }
        }

        // 刷新数据
        async function refreshData() {
            try {
                refreshBtn.innerHTML = '<i class="fas fa-sync-alt fa-spin"></i> 刷新中...';
                refreshBtn.disabled = true;

                const response = await fetch('/api/plc/gps');
                const result = await response.json();

                if (result.success && result.data) {
                    updateGpsData(result.data);
                    showAlert('数据刷新成功', 'success');
                } else {
                    showAlert('数据读取失败：' + (result.message || '未知错误'), 'warning');
                    clearData();
                }
            } catch (error) {
                console.error('刷新数据失败:', error);
                showAlert('刷新数据失败：' + error.message, 'danger');
                clearData();
            } finally {
                refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> 刷新数据';
                refreshBtn.disabled = false;
            }
        }

        // 更新GPS数据显示
        function updateGpsData(data) {
            longitude.textContent = data.longitude.toFixed(6);
            latitude.textContent = data.latitude.toFixed(6);
            deviceId.textContent = data.deviceId;
            
            const updateTime = new Date(data.readTime).toLocaleString('zh-CN');
            lastUpdateTime.textContent = updateTime;
            
            if (data.isConnected) {
                dataStatus.textContent = '正常';
                dataStatus.className = 'badge bg-success';
            } else {
                dataStatus.textContent = '异常';
                dataStatus.className = 'badge bg-danger';
            }
        }

        // 清空数据显示
        function clearData() {
            longitude.textContent = '--';
            latitude.textContent = '--';
            deviceId.textContent = '--';
            lastUpdateTime.textContent = '--';
            dataStatus.textContent = '未知';
            dataStatus.className = 'badge bg-secondary';
        }

        // 读取Real值
        async function readRealValue() {
            const dbNumber = document.getElementById('realDbNumber').value;
            const startByte = document.getElementById('realStartByte').value;

            if (!dbNumber || !startByte) {
                showAlert('请输入数据块编号和起始字节', 'warning');
                return;
            }

            try {
                readRealBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 读取中...';
                readRealBtn.disabled = true;

                const response = await fetch(`/api/plc/read/real/${dbNumber}/${startByte}`);
                const result = await response.json();

                if (result.success && result.data !== null) {
                    realResult.textContent = result.data.toFixed(6);
                    realResult.className = 'text-success';
                } else {
                    realResult.textContent = '读取失败';
                    realResult.className = 'text-danger';
                }
            } catch (error) {
                console.error('读取Real值失败:', error);
                realResult.textContent = '错误：' + error.message;
                realResult.className = 'text-danger';
            } finally {
                readRealBtn.innerHTML = '读取';
                readRealBtn.disabled = false;
            }
        }

        // 读取Int值
        async function readIntValue() {
            const dbNumber = document.getElementById('intDbNumber').value;
            const startByte = document.getElementById('intStartByte').value;

            if (!dbNumber || !startByte) {
                showAlert('请输入数据块编号和起始字节', 'warning');
                return;
            }

            try {
                readIntBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 读取中...';
                readIntBtn.disabled = true;

                const response = await fetch(`/api/plc/read/int/${dbNumber}/${startByte}`);
                const result = await response.json();

                if (result.success && result.data !== null) {
                    intResult.textContent = result.data;
                    intResult.className = 'text-success';
                } else {
                    intResult.textContent = '读取失败';
                    intResult.className = 'text-danger';
                }
            } catch (error) {
                console.error('读取Int值失败:', error);
                intResult.textContent = '错误：' + error.message;
                intResult.className = 'text-danger';
            } finally {
                readIntBtn.innerHTML = '读取';
                readIntBtn.disabled = false;
            }
        }

        // 显示提示消息
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // 3秒后自动消失
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 3000);
        }
    </script>
</body>
</html>
